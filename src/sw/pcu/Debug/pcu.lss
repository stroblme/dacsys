
pcu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000200  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  00800100  00800100  00000274  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009a5  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007ca  00000000  00000000  00000ce9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000044c  00000000  00000000  000014b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000a8  00000000  00000000  00001900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000400  00000000  00000000  000019a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000155  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00001efd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_24>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	ab 30       	cpi	r26, 0x0B	; 11
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <getRxRegState>:
/*
* Register Parsing
*/
bool getRxRegState(int map, int bit)
{
	if (twi_rxBuffer[map] & (1<<bit))
  90:	80 50       	subi	r24, 0x00	; 0
  92:	9f 4f       	sbci	r25, 0xFF	; 255
  94:	fc 01       	movw	r30, r24
  96:	80 81       	ld	r24, Z
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <getRxRegState+0x10>
  9c:	95 95       	asr	r25
  9e:	87 95       	ror	r24
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <getRxRegState+0xc>
	{
		return true;
	}
	return false;
  a4:	81 70       	andi	r24, 0x01	; 1
  a6:	08 95       	ret

000000a8 <Init>:
/*
* Initialization
*/
void Init(void)
{
	cli();
  a8:	f8 94       	cli
	#pragma region Ports
	//Inputs
	DDRC &= ~(1<<USBEN);
  aa:	38 98       	cbi	0x07, 0	; 7
	DDRD &= ~(1<<SW1) & ~(1<<SW2) & ~(1<<CHA) & ~(1<<CHB);
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	80 7f       	andi	r24, 0xF0	; 240
  b0:	8a b9       	out	0x0a, r24	; 10
	//Outputs
	DDRC |= (1<<VAN_EN) | (1<<DAC_EN) | (1<<CLK_EN);
  b2:	87 b1       	in	r24, 0x07	; 7
  b4:	8e 60       	ori	r24, 0x0E	; 14
  b6:	87 b9       	out	0x07, r24	; 7
	#pragma endregion Ports
	
	#pragma region TWI
	init_twi_slave(TWI_SLV_ADDR); //TWI as slave with address slv_addr
  b8:	82 e7       	ldi	r24, 0x72	; 114
  ba:	0e 94 75 00 	call	0xea	; 0xea <init_twi_slave>
	#pragma endregion TWI
	
	#pragma region Default_States
	setOutput(PORTC, VAN_EN, false); //disable power supply for analog devices
  be:	88 b1       	in	r24, 0x08	; 8
	setOutput(PORTC, DAC_EN, false); //disable DAC
  c0:	88 b1       	in	r24, 0x08	; 8
	setOutput(PORTC, CLK_EN, false); //disable Clock
  c2:	88 b1       	in	r24, 0x08	; 8

	while (getRxRegState(SYSINF, GLOBAL_EN)){} //wait till master is up and ready
  c4:	60 e0       	ldi	r22, 0x00	; 0
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 48 00 	call	0x90	; 0x90 <getRxRegState>
  d0:	81 11       	cpse	r24, r1
  d2:	f8 cf       	rjmp	.-16     	; 0xc4 <Init+0x1c>
	#pragma endregion Default_States
	sei();
  d4:	78 94       	sei
  d6:	08 95       	ret

000000d8 <main>:
* Main entry point
*/
int main(void)
{
	//initialization
	Init();
  d8:	0e 94 54 00 	call	0xa8	; 0xa8 <Init>

	//enter main program
	while(true)
	{
		if(getRxRegState(SYSINF, BIT_SYNC))
  dc:	61 e0       	ldi	r22, 0x01	; 1
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 48 00 	call	0x90	; 0x90 <getRxRegState>
		{
			
		}
	}
  e8:	f9 cf       	rjmp	.-14     	; 0xdc <main+0x4>

000000ea <init_twi_slave>:
/*
* Init method
*/
void init_twi_slave(uint8_t adr)
{
	TWAR= adr; //Adresse setzen
  ea:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
	TWCR &= ~(1<<TWSTA)|(1<<TWSTO);
  ee:	ec eb       	ldi	r30, 0xBC	; 188
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	8f 7d       	andi	r24, 0xDF	; 223
  f6:	80 83       	st	Z, r24
	TWCR|= (1<<TWEA) | (1<<TWEN)|(1<<TWIE); 	
  f8:	80 81       	ld	r24, Z
  fa:	85 64       	ori	r24, 0x45	; 69
  fc:	80 83       	st	Z, r24
	twi_buffer_adr=0xFF;  
  fe:	8f ef       	ldi	r24, 0xFF	; 255
 100:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <twi_buffer_adr>
	sei();
 104:	78 94       	sei
 106:	08 95       	ret

00000108 <__vector_24>:
* ISR method
* ISR, die bei einem Ereignis auf dem Bus ausgelöst wird. Im Register TWSR befindet sich dann 
* ein Statuscode, anhand dessen die Situation festgestellt werden kann.
*/
ISR (TWI_vect)  
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	8f 93       	push	r24
 114:	9f 93       	push	r25
 116:	ef 93       	push	r30
 118:	ff 93       	push	r31
	uint8_t data=0;
	switch (TW_STATUS) 								// TWI-Statusregister prüfen und nötige Aktion bestimmen 
 11a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 11e:	88 7f       	andi	r24, 0xF8	; 248
 120:	80 38       	cpi	r24, 0x80	; 128
 122:	a9 f0       	breq	.+42     	; 0x14e <__vector_24+0x46>
 124:	28 f4       	brcc	.+10     	; 0x130 <__vector_24+0x28>
 126:	80 36       	cpi	r24, 0x60	; 96
 128:	59 f0       	breq	.+22     	; 0x140 <__vector_24+0x38>
 12a:	80 37       	cpi	r24, 0x70	; 112
 12c:	81 f0       	breq	.+32     	; 0x14e <__vector_24+0x46>
 12e:	5a c0       	rjmp	.+180    	; 0x1e4 <__vector_24+0xdc>
 130:	88 3a       	cpi	r24, 0xA8	; 168
 132:	a9 f1       	breq	.+106    	; 0x19e <__vector_24+0x96>
 134:	88 3b       	cpi	r24, 0xB8	; 184
 136:	99 f1       	breq	.+102    	; 0x19e <__vector_24+0x96>
 138:	80 39       	cpi	r24, 0x90	; 144
 13a:	09 f0       	breq	.+2      	; 0x13e <__vector_24+0x36>
 13c:	53 c0       	rjmp	.+166    	; 0x1e4 <__vector_24+0xdc>
 13e:	2f c0       	rjmp	.+94     	; 0x19e <__vector_24+0x96>
		{
		case TW_SR_SLA_ACK: 						// 0x60 Slave Receiver, wurde adressiert	
			TWCR_ACK; 								// nächstes Datenbyte empfangen, ACK danach
 140:	85 ec       	ldi	r24, 0xC5	; 197
 142:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			twi_buffer_adr=0xFF; 						// Bufferposition ist undefiniert
 146:	8f ef       	ldi	r24, 0xFF	; 255
 148:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <twi_buffer_adr>
			break;
 14c:	4e c0       	rjmp	.+156    	; 0x1ea <__vector_24+0xe2>
		case TW_SR_GCALL_ACK:
		case TW_SR_DATA_ACK: 						// 0x80 Slave Receiver,Daten empfangen
			data=TWDR; 								// Empfangene Daten auslesen
 14e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			if (twi_buffer_adr == 0xFF) 				// erster Zugriff, Bufferposition setzen
 152:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <twi_buffer_adr>
 156:	9f 3f       	cpi	r25, 0xFF	; 255
 158:	59 f4       	brne	.+22     	; 0x170 <__vector_24+0x68>
				{
					if(data<=twi_buffer_size)			// Kontrolle ob gewünschte Adresse im erlaubten bereich
 15a:	86 30       	cpi	r24, 0x06	; 6
 15c:	18 f4       	brcc	.+6      	; 0x164 <__vector_24+0x5c>
						{
							twi_buffer_adr= data; 		// Bufferposition wie adressiert setzen
 15e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <twi_buffer_adr>
 162:	02 c0       	rjmp	.+4      	; 0x168 <__vector_24+0x60>
						}
					else
						{
						twi_buffer_adr=0; 				// Adresse auf Null setzen. Ist das sinnvoll?
 164:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <twi_buffer_adr>
						}				
					TWCR_ACK;						// nächstes Datenbyte empfangen, ACK danach, um nächstes Byte anzufordern
 168:	85 ec       	ldi	r24, 0xC5	; 197
 16a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 16e:	3d c0       	rjmp	.+122    	; 0x1ea <__vector_24+0xe2>
				}
			else 									// weiterer Zugriff, Daten empfangen
				{
					twi_rxBuffer[twi_buffer_adr]=data; 		// Daten in Buffer schreiben
 170:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <twi_buffer_adr>
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	e0 50       	subi	r30, 0x00	; 0
 178:	ff 4f       	sbci	r31, 0xFF	; 255
 17a:	80 83       	st	Z, r24
					twi_buffer_adr++; 					// Buffer-Adresse weiterzählen für nächsten Schreibzugriff
 17c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <twi_buffer_adr>
 180:	8f 5f       	subi	r24, 0xFF	; 255
 182:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <twi_buffer_adr>
					if(twi_buffer_adr<(twi_buffer_size-1)) 	// im Buffer ist noch Platz für mehr als ein Byte
 186:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <twi_buffer_adr>
 18a:	84 30       	cpi	r24, 0x04	; 4
 18c:	20 f4       	brcc	.+8      	; 0x196 <__vector_24+0x8e>
						{
							TWCR_ACK;				// nächstes Datenbyte empfangen, ACK danach, um nächstes Byte anzufordern
 18e:	85 ec       	ldi	r24, 0xC5	; 197
 190:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 194:	2a c0       	rjmp	.+84     	; 0x1ea <__vector_24+0xe2>
						}
					else   							// es kann nur noch ein Byte kommen, dann ist der Buffer voll
						{
							TWCR_NACK;				// letztes Byte lesen, dann NACK, um vollen Buffer zu signaliseren
 196:	85 e8       	ldi	r24, 0x85	; 133
 198:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 19c:	26 c0       	rjmp	.+76     	; 0x1ea <__vector_24+0xe2>

		case TW_ST_SLA_ACK: 						//
		case TW_SR_GCALL_DATA_ACK:
		case TW_ST_DATA_ACK: 						// 0xB8 Slave Transmitter, weitere Daten wurden angefordert

			if (twi_buffer_adr == 0xFF) 				// zuvor keine Leseadresse angegeben! 
 19e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <twi_buffer_adr>
 1a2:	8f 3f       	cpi	r24, 0xFF	; 255
 1a4:	11 f4       	brne	.+4      	; 0x1aa <__vector_24+0xa2>
				{
					twi_buffer_adr=0;
 1a6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <twi_buffer_adr>
				}	
			TWDR = twi_txBuffer[twi_buffer_adr]; 			// Datenbyte senden 
 1aa:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <twi_buffer_adr>
 1ae:	f0 e0       	ldi	r31, 0x00	; 0
 1b0:	ea 5f       	subi	r30, 0xFA	; 250
 1b2:	fe 4f       	sbci	r31, 0xFE	; 254
 1b4:	80 81       	ld	r24, Z
 1b6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
			twi_buffer_adr++; 							// bufferadresse für nächstes Byte weiterzählen
 1ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <twi_buffer_adr>
 1be:	8f 5f       	subi	r24, 0xFF	; 255
 1c0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <twi_buffer_adr>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	81 e2       	ldi	r24, 0x21	; 33
 1c6:	8a 95       	dec	r24
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <__vector_24+0xbe>
 1ca:	00 00       	nop
			_delay_us(5);							//CHANGED
			if(twi_buffer_adr<(twi_buffer_size-1)) 			// im Buffer ist mehr als ein Byte, das gesendet werden kann
 1cc:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <twi_buffer_adr>
 1d0:	84 30       	cpi	r24, 0x04	; 4
 1d2:	20 f4       	brcc	.+8      	; 0x1dc <__vector_24+0xd4>
				{
					TWCR_ACK; 						// nächstes Byte senden, danach ACK erwarten
 1d4:	85 ec       	ldi	r24, 0xC5	; 197
 1d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1da:	07 c0       	rjmp	.+14     	; 0x1ea <__vector_24+0xe2>
				}
			else
				{
					TWCR_NACK; 						// letztes Byte senden, danach NACK erwarten
 1dc:	85 e8       	ldi	r24, 0x85	; 133
 1de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <__vector_24+0xe2>
		case TW_ST_DATA_NACK: 						// 0xC0 Keine Daten mehr gefordert 
		case TW_SR_DATA_NACK: 						// 0x88 
		case TW_ST_LAST_DATA: 						// 0xC8  Last data byte in TWDR has been transmitted (TWEA = 0); ACK has been received
		case TW_SR_STOP: 							// 0xA0 STOP empfangen
		default: 	
			TWCR_RESET; 							// Übertragung beenden, warten bis zur nächsten Adressierung
 1e4:	85 ec       	ldi	r24, 0xC5	; 197
 1e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
			break;	
		} //end.switch (TW_STATUS)
 1ea:	ff 91       	pop	r31
 1ec:	ef 91       	pop	r30
 1ee:	9f 91       	pop	r25
 1f0:	8f 91       	pop	r24
 1f2:	0f 90       	pop	r0
 1f4:	0f be       	out	0x3f, r0	; 63
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <_exit>:
 1fc:	f8 94       	cli

000001fe <__stop_program>:
 1fe:	ff cf       	rjmp	.-2      	; 0x1fe <__stop_program>
